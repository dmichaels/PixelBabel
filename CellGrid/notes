
// Get these three things as much as possible independently from each other:
//
// 0. viewColumns and viewColumnsExtra
// 1. truncateLeft and truncateRight
// 2. gridCellX from viewCellX
// 3. gridCellX color i.e. cell foreground if in range otherwise background

// 0. viewColumns and viewColumnsExtra
//
self._viewWidthExtra = self._viewWidth % self._cellSize
self._viewColumns = self._viewWidth / self._cellSize
self._viewColumnsExtra = ((self._viewWidthExtra > 0) ? 1 : 0)

// 1. truncateLeft and truncateRight
//
if (shiftfX > 0) {
    if (viewCellFirstX) {
        truncateLeft = self._cellSize - shiftX
    }
    else if (viewCellLastX) {
        if (self._viewWidthExtra > 0) {
            truncateRight = (self._cellSize - shiftX + self._viewWidthExtra) % self._cellSize
        }
        else {
            truncateRight = self._cellSize - shiftX
        }
    }
}
else if (shiftfX < 0) {
    if (viewCellFirstX) {
        truncateLeft = -shiftX
    }
    else if (viewCellLastX) {
        if (self._viewWidthExtra > 0) {
            truncateRight = (self._viewWidthExtra - shiftX) % self._cellSize
        }
        else {
            truncateRight = -shiftX
        }
    }
}
else if (self._viewWidthExtra > 0) {
    truncateRight = self._viewWidthExtra
}

// 2. gridCellX from viewCellX
//
// TODO
let gridCellX = viewCellX - self._shiftCellX - (shiftRight ? 1 : 0)
let gridCellY = viewCellY - self._shiftCellY - (shiftDown ? 1 : 0)

// 3. gridCellX color i.e. cell foreground if in range otherwise background
//
// TODO
